#    customers c(j)  which warehouse boolean
#    distance  d(i,j)
#
#   minimize sum(   D(i,j) * c(j)
#
#
#
#
#
#
#
#
def mip1(facilities, customers):
    return []


from collections import namedtuple
import math
from cvxpy import *
import numpy as np
import random

def length(point1, point2):
    return math.sqrt((point1.x - point2.x) ** 2 + (point1.y - point2.y) ** 2)


def initial_solution(customers, facilities):
    solution = [-1] * len(customers)
    capacity_remaining = [f.capacity for f in facilities]
    customers_per_fac = [0 for f in facilities]

    avg_customers_per_fac = len(customers) / len(facilities)
    max_cust = avg_customers_per_fac * 2

    facility_index = 0
    i = 0
    for customer in customers:
        #print(i, facility_index)
        i +=1
        if capacity_remaining[facility_index] >= customer.demand and customers_per_fac[facility_index] < max_cust:
            solution[customer.index] = facility_index
            capacity_remaining[facility_index] -= customer.demand
            customers_per_fac[facility_index] += 1
        else:
            facility_index += 1
            assert capacity_remaining[facility_index] >= customer.demand
            solution[customer.index] = facility_index
            capacity_remaining[facility_index] -= customer.demand
    return solution


def optimize(solution, customers, facilities, customers_to_optimize):
    #print(solution)
    #print('customers to opt:{}'.format(customers_to_optimize))
    M = len(customers) + 1
    # variables
    from collections import defaultdict
    in_facility = defaultdict(dict)
    for f_i, f in enumerate(facilities):
        for c_i, c in enumerate(customers):
            if c_i in customers_to_optimize:
                in_facility[f_i][c_i] = Bool()
            else:
                in_facility[f_i][c_i] = 1 if solution[c_i] == f_i else 0


    in_business = [Bool() for f in facilities]


    # under capacity
    constraints = []

    for f_i, f in enumerate(facilities):
        usage = None
        usage_constant = 0
        fac_bus = None
        fac_bus_constant = 0
        for c_i, c in enumerate(customers):
            in_facility_var = in_facility[f_i][c_i]
            if type(in_facility_var) is int:
                if in_facility_var == 1:
                    usage_constant += c.demand
                    fac_bus_constant = 1
            else:
                if usage is None:
                    usage = in_facility[f_i][c_i] * c.demand
                else:
                    usage += in_facility[f_i][c_i] * c.demand
                if fac_bus is None:
                    fac_bus = in_facility[f_i][c_i]
                else:
                    fac_bus += in_facility[f_i][c_i]

        if usage is not None:
            constraint = usage + usage_constant <= f.capacity
            if constraint != True:
                constraints.append(constraint)

            # only in business can serve
            constraint = fac_bus + fac_bus_constant <= in_business[f_i] * M
            if constraint != True and fac_bus_constant != 1:
                constraints.append(constraint)
        else:
            raise

    # only served by one
    for c_i, c in enumerate(customers):
        served_by = None
        for f_i, f in enumerate(facilities):
            if served_by is None:
                served_by = in_facility[f_i][c_i]
            else:
                served_by += in_facility[f_i][c_i]

        constraint = served_by == 1
        if constraint != True:
            constraints.append(constraint)

    cost = None
    cost_constant = 0
    for f_i, f in enumerate(facilities):
        for c_i, c in enumerate(customers):
            in_facility_var = in_facility[f_i][c_i]
            if type(in_facility_var) is int:
                if in_facility_var == 1:
                    cost_constant += length(f.location, c.location)
                    in_business[f_i] = 1
            else:
                distance = length(f.location, c.location)
                if cost is None:
                    cost = in_facility_var * distance
                else:
                    cost += in_facility_var * distance

    for f_i, f in enumerate(facilities):
        if type(in_business[f_i]) is int:
            if in_business[f_i] == 1:
                cost_constant += facilities[f_i].setup_cost
        else:
            cost += in_business[f_i] * facilities[f_i].setup_cost

    cost += cost_constant

    #for con in constraints:
    #    print(con.__str__())

    #print(cost.__str__())

    # Form objective.
    obj = Minimize(cost)

    # Form and solve problem.
    prob = Problem(obj, constraints)
    print(prob.solve())
    #print(in_facility)
    #print(in_business)

    customer_facilities = []

    customer_to_facility = {}
    for f_i, customers_dict in in_facility.items():
        for c_i, var in customers_dict.items():
            if type(var) is int:
                if var == 1:
                    customer_to_facility[c_i] = f_i
            else:
                if var.value > 0.5:
                    customer_to_facility[c_i] = f_i

    for c_i, c in enumerate(customers):
        #customer_facilities.append([in_facility[j][i].value > 0.5 for j in range(len(facilities))].index(True))
        customer_facilities.append(customer_to_facility.get(c_i))
    return customer_facilities

def run2(facilities, customers, num_fac, iterations):
    print(num_fac, iterations)


    if len(facilities) == 100 and len(customers) == 1000:
        solution = '28 9 32 2 37 13 37 37 13 17 9 37 28 37 37 2 13 37 39 9 36 37 2 32 37 37 2 37 13 37 2 39 9 9 23 32 23 13 37 37 23 9 32 2 2 17 13 28 23 36 37 37 17 37 37 32 37 9 9 37 37 36 17 36 37 23 37 23 37 9 37 36 37 32 28 37 39 36 37 39 36 28 36 39 37 2 2 2 32 37 17 36 28 9 9 23 2 37 17 37 32 28 37 9 37 37 28 9 9 9 32 37 37 2 37 28 37 17 37 32 39 13 37 36 32 9 2 23 32 37 28 2 37 37 17 36 17 23 23 28 32 2 37 2 9 37 39 39 39 32 39 37 37 36 37 28 37 37 37 37 37 37 37 23 37 32 36 28 32 13 32 23 37 9 36 37 37 2 13 32 23 13 32 2 37 9 37 37 36 13 13 28 32 17 37 37 37 2 39 37 13 37 28 37 37 2 17 23 37 36 17 9 37 17 37 39 17 9 9 39 2 2 2 23 36 37 37 39 39 37 32 17 9 2 37 23 37 2 37 17 2 13 37 32 32 2 36 32 37 37 2 37 36 37 13 37 37 37 2 37 39 28 37 2 9 37 23 23 9 2 2 28 28 37 17 36 37 23 32 37 39 23 17 39 36 17 37 36 13 28 28 37 39 39 13 23 37 9 37 2 36 2 13 39 2 36 9 37 36 23 37 9 36 36 2 37 13 37 2 37 17 23 37 37 23 13 37 37 39 37 23 23 37 37 37 36 37 32 9 32 32 37 37 2 13 23 39 17 37 36 37 37 36 39 37 37 23 17 9 17 23 17 2 17 13 17 2 9 37 17 36 17 37 17 37 37 2 39 9 9 32 37 39 37 23 28 37 9 37 2 37 37 9 28 37 32 2 36 2 36 28 9 37 37 32 13 23 37 37 9 32 37 32 9 37 37 23 28 37 17 17 37 37 2 32 32 23 39 37 37 2 37 37 2 28 37 28 37 2 17 37 36 23 32 32 32 37 37 13 2 32 37 2 37 2 13 37 39 17 13 32 37 2 13 2 32 32 13 37 23 23 2 36 37 28 37 32 32 37 39 17 2 13 23 37 9 17 17 13 32 32 9 17 23 9 9 37 2 9 37 37 37 37 2 37 23 37 28 32 37 13 2 9 32 36 37 32 28 36 37 32 2 37 39 2 37 37 17 37 23 9 37 23 37 36 36 36 39 37 37 37 37 36 37 9 32 37 2 37 37 37 39 9 37 32 39 2 37 37 2 32 2 37 23 23 37 36 9 37 32 39 32 32 39 17 23 23 37 9 37 2 37 36 9 2 9 13 13 17 37 9 32 17 37 37 23 36 36 13 37 28 37 13 37 2 37 32 32 13 13 9 36 37 28 37 17 39 23 28 2 37 37 36 17 37 9 37 2 37 32 37 17 9 39 36 23 17 37 37 39 36 37 37 37 37 17 13 32 37 37 39 17 9 9 37 13 37 36 39 2 23 37 37 37 39 23 36 37 39 17 39 37 37 17 23 32 32 39 37 32 36 28 23 37 37 32 39 2 32 17 32 32 32 23 37 37 2 36 36 9 37 37 13 37 23 37 36 17 2 17 23 28 37 13 28 9 37 37 17 37 9 9 23 37 39 36 17 37 36 32 17 37 37 37 17 36 2 32 37 28 37 37 2 37 2 9 28 32 9 36 28 17 37 36 32 9 36 32 36 37 17 37 17 28 36 37 9 37 32 36 13 28 28 32 2 2 2 37 37 37 13 37 37 37 13 23 37 37 9 37 36 37 9 2 37 37 2 23 23 28 37 36 37 37 23 17 9 23 2 37 23 39 32 37 37 23 37 23 17 39 2 37 2 17 37 36 36 39 39 28 32 37 39 23 37 32 39 13 17 17 37 2 28 32 32 32 37 2 23 39 32 2 37 37 36 37 37 9 37 9 37 2 39 39 37 9 32 32 23 37 17 32 23 17 37 39 17 39 23 39 9 17 32 17 13 23 37 37 37 28 36 32 37 13 37 37 13 28 37 32 32 37 32 17 37 28 37 37 37 13 37 37 36 37 37 2 36 2 17 37 2 28 28 37 39 28 37 37 2 2 37 36 23 23 13 32 37 37 37 36 37 23 37 9 17 36 37 23 37 2 13 13 13 37 39 23 2 37 36 9 32 36 36 39 2 23 17 23 37 28 9 37 2 2 9 17 23 37 39 28 37 37 37 37 37 2 28 9 37 28 2 32 37 37 32 2 9 37 9 37'.split(' ')
        solution = [int(x) for x in solution]
    elif len(facilities) == 200:
        solution = '155 29 132 66 76 33 164 24 6 113 167 19 35 48 136 183 13 169 3 46 60 85 139 192 167 27 95 118 51 59 13 180 72 175 3 24 20 157 120 114 108 49 48 175 171 35 102 27 123 145 162 66 123 157 94 139 59 3 160 148 183 167 3 26 21 37 25 25 94 198 66 162 146 86 60 118 43 17 159 30 123 108 125 92 37 71 146 62 2 20 114 30 139 48 85 33 141 94 162 174 113 108 149 119 46 118 175 192 69 42 144 13 62 120 43 30 165 33 139 69 37 165 185 185 29 171 180 192 6 197 66 6 76 4 123 155 164 175 49 66 105 60 136 56 69 32 140 3 119 4 158 92 160 160 181 113 176 22 146 146 165 101 41 123 118 32 174 27 56 4 59 135 146 136 49 32 22 185 45 95 167 27 60 94 114 173 15 15 48 59 182 163 178 60 49 26 35 163 185 123 144 148 37 119 176 71 136 86 21 173 174 102 43 25 13 94 4 132 32 145 92 78 66 43 113 62 32 185 175 186 55 177 32 2 197 114 13 6 94 145 85 56 123 118 167 37 100 95 100 105 197 45 59 35 53 56 185 22 109 125 15 27 7 186 43 101 186 180 56 145 198 85 126 29 126 42 4 164 21 132 108 160 178 87 71 45 169 2 163 145 113 123 59 114 37 181 157 167 35 105 48 78 20 21 113 52 145 46 78 76 66 120 175 26 189 41 26 169 157 25 24 51 185 169 145 51 101 24 135 141 30 120 118 182 159 95 25 51 145 35 15 22 157 174 102 71 17 118 87 3 19 69 171 158 69 185 85 135 108 189 125 141 25 15 126 183 126 126 171 144 76 35 62 101 160 87 78 148 87 144 29 71 126 100 17 3 165 119 6 165 51 157 56 180 181 109 92 20 164 178 76 140 174 45 35 180 2 182 105 22 48 144 175 183 162 94 169 113 55 178 139 92 27 24 181 159 17 198 197 59 145 120 155 144 148 71 69 52 6 159 186 188 6 3 159 43 85 47 47 60 66 13 7 37 52 183 19 173 157 26 188 62 7 160 132 173 22 159 167 136 136 158 41 26 46 101 25 47 22 71 141 126 78 15 101 113 102 144 13 41 113 182 171 30 141 103 135 146 3 49 132 186 46 144 186 52 69 119 29 188 149 180 45 15 45 176 192 197 162 95 100 160 102 22 66 7 188 123 180 27 21 119 178 3 144 27 159 43 45 186 144 45 103 177 158 173 71 140 120 60 72 160 145 189 72 177 2 167 78 158 139 135 29 186 42 86 29 108 92 146 94 66 101 62 55 165 92 176 95 69 72 19 21 197 148 149 198 132 48 2 24 165 185 15 109 176 140 43 146 158 157 102 160 139 114 46 94 66 197 188 183 158 183 183 192 3 119 141 180 108 171 72 7 164 33 181 33 176 4 177 32 192 3 165 26 181 46 60 101 185 120 72 149 135 192 198 108 174 94 49 157 174 135 66 72 197 162 185 87 148 173 174 189 167 47 32 2 120 35 95 158 95 141 162 43 51 26 41 189 21 175 60 46 126 85 53 136 48 71 86 178 123 37 169 178 56 85 167 158 66 62 19 175 41 100 41 55 100 135 47 4 114 146 51 197 19 17 72 19 157 51 180 101 42 164 118 4 7 52 56 125 136 169 62 102 52 114 60 186 53 60 120 60 76 48 144 24 189 41 100 29 30 69 139 94 76 157 19 37 125 144 185 164 173 49 140 19 7 52 85 171 103 183 183 105 51 186 92 32 175 113 33 169 105 26 189 33 141 139 29 24 157 135 180 178 182 22 114 56 105'.split(' ')
        solution = [int(x) for x in solution]
    elif len(facilities) == 500:
        solution = '131 33 359 206 88 320 239 358 427 327 237 330 342 307 277 112 394 326 157 170 171 311 184 408 436 481 369 236 484 427 489 300 170 20 190 186 34 39 416 9 238 490 51 451 338 484 206 458 211 104 127 308 171 482 372 481 51 134 200 9 178 167 394 44 222 167 239 50 92 170 104 62 72 222 9 318 346 193 11 394 430 359 119 475 144 209 82 162 445 302 388 390 482 310 26 381 29 443 152 431 450 34 67 31 241 498 224 390 472 45 412 299 489 381 303 319 221 490 337 198 72 289 248 359 245 224 314 359 384 355 433 45 75 222 26 215 443 121 57 384 170 475 348 125 69 36 9 11 165 198 461 318 418 50 372 394 410 152 256 125 139 17 45 375 33 245 244 6 36 166 324 299 92 309 53 68 178 314 458 156 436 181 15 103 454 257 39 433 109 85 82 143 133 34 239 73 227 384 11 100 483 449 206 423 162 302 137 173 65 303 497 475 305 125 114 31 127 294 94 446 238 438 64 74 350 225 324 356 260 111 65 162 499 451 225 69 94 94 39 337 394 117 372 82 447 189 6 26 191 403 93 430 293 155 454 134 22 82 224 165 483 293 394 34 401 401 324 32 499 355 139 170 468 23 221 369 50 308 211 219 320 312 416 17 327 308 271 245 426 263 152 70 303 430 320 309 348 26 495 342 203 210 226 458 115 40 15 11 271 162 495 355 326 324 237 186 135 167 309 309 254 241 249 64 407 390 257 490 165 221 93 481 144 139 94 261 40 184 450 483 485 9 136 219 259 94 344 9 111 335 419 26 179 321 355 102 300 100 403 324 450 340 200 11 419 100 207 390 450 289 75 4 264 73 207 449 68 313 334 335 181 485 53 335 259 155 209 112 221 157 164 330 14 433 156 215 222 228 200 498 303 115 433 334 222 171 342 346 193 100 223 140 241 484 224 490 211 312 100 57 137 14 147 179 135 130 210 221 237 316 140 14 244 31 493 330 197 40 342 229 336 497 482 300 210 152 432 203 0 467 77 77 130 497 36 136 381 51 261 246 297 144 206 72 157 210 369 186 200 39 127 246 193 96 45 64 363 450 125 189 87 136 340 104 261 421 421 57 369 289 137 218 103 235 287 313 130 344 394 48 186 397 223 69 6 367 482 87 11 317 181 31 326 17 294 22 168 477 165 241 67 115 464 30 263 372 342 173 321 385 359 336 352 301 314 412 11 147 469 161 361 237 84 271 243 217 137 113 367 309 210 390 384 33 215 23 117 408 125 336 45 203 309 326 443 361 137 221 443 137 260 405 360 346 84 6 458 267 155 125 449 355 30 468 206 315 219 139 250 263 77 186 206 261 144 361 225 168 170 133 353 299 397 218 11 186 394 147 481 438 319 143 184 229 423 133 189 433 381 362 36 110 104 243 31 335 39 143 270 189 33 69 379 436 483 392 75 186 104 445 497 266 421 245 479 373 15 193 73 239 421 7 408 207 238 207 147 62 236 115 426 361 385 316 303 139 67 405 277 235 109 401 217 481 224 14 381 208 206 367 88 373 49 210 34 260 264 257 325 321 115 208 144 48 162 340 334 130 446 228 252 123 244 427 418 48 147 207 427 8 256 307 82 125 430 244 74 157 171 477 260 256 325 408 479 177 215 131 7 381 294 112 6 137 225 40 115 499 270 26 482 235 26 144 56 405 49 346 119 184 356 68 84 282 184 215 156 493 353 9 316 34 397 65 198 397 130 333 384 179 333 318 305 45 23 15 407 88 381 446 215 116 264 260 167 131 257 405 238 31 245 395 39 453 469 74 221 55 39 454 238 271 104 383 446 156 228 388 468 430 282 337 367 335 467 109 498 173 55 168 372 419 239 74 206 64 237 335 53 380 338 446 197 235 257 250 383 460 186 316 418 139 31 200 418 215 340 451 458 261 451 472 175 277 453 446 123 110 260 211 184 206 344 137 277 210 359 50 334 36 337 296 457 117 229 197 33 111 307 203 360 137 424 340 169 105 171 260 77 7 68 68 301 360 73 209 109 133 92 164 310 405 155 123 336 277 282 167 157 103 156 155 115 277 130 250 125 186 200 250 230 395 57 67 206 467 173 114 282 0 135 302 73 102 359 202 230 45 199 85 69 431 408 360 173 70 143 69 445 40 119 297 215 22 471 498 359 202 6 471 173 198 6 121 46 169 499 186 336 168 412 369 418 135 48 31 312 46 169 240 217 499 443 55 34 114 481 127 169 271 266 112 127 131 483 320 94 168 308 335 74 477 229 75 477 461 30 316 436 6 356 361 236 240 23 464 241 34 277 237 0 477 270 223 266 186 436 58 19 178 391 56 397 0 390 353 418 460 308 57 100 49 62 125 34 318 342 164 270 333 477 446 39 229 355 15 333 348 11 472 245 384 111 252 241 289 217 379 493 453 240 111 100 277 212 184 33 15 64 7 227 316 408 481 93 367 46 477 299 472 294 302 319 93 257 0 383 178 387 171 22 485 104 453 327 496 112 450 436 431 464 256 359 111 273 293 454 103 360 254 207 475 260 256 433 147 309 229 240 320 346 85 330 136 156 9 93 69 211 117 135 318 313 49 497 226 50 155 50 245 300 292 57 320 424 356 333 227 202 183 123 458 20 67 162 55 236 403 47 345 342 225 259 337 451 209 171 114 210 407 358 353 315 361 394 207 302 395 77 352 117 344 67 372 387 47 222 17 417 147 179 164 445 77 67 113 266 157 203 11 191 477 333 186 342 39 475 436 447 102 22 252 321 490 395 361 221 400 225 9 346 92 170 241 52 4 336 157 345 433 73 250 111 372 282 207 496 15 226 384 217 483 361 489 191 229 4 451 26 340 139 257 55 273 303 318 64 15 408 431 136 157 238 9 105 395 221 449 302 471 110 355 103 277 443 324 31 497 6 461 196 385 424 228 14 59 36 461 460 126 432 355 94 342 29 416 383 121 100 363 312 498 469 321 209 170 407 482 479 203 471 238 77 66 104 338 14 261 360 186 226 92 266 497 342 294 300 428 239 167 15 462 121 325 330 36 271 321 320 51 319 6 206 450 228 498 313 50 67 391 57 162 239 309 161 55 390 287 497 315 438 114 359 451 205 211 131 59 309 271 11 427 312 497 230 321 394 390 64 408 256 224 14 115 261 33 77 175 412 110 20 162 240 144 47 263 313 34 305 200 431 203 390 489 381 335 394 186 73 412 209 182 53 200 318 215 464 416 137 369 271 203 115 199 133 311 230 222 410 198 156 162 137 167 8 299 230 309 432 369 340 324 254 58 401 170 100 430 405 11 113 263 69 394 489 318 66 352 45 40 45 316 360 237 482 498 36 169 358 197 137 111 64 183 173 497 55 416 22 53 446 490 209 256 206 446 458 26 307 7 324 114 430 226 318 263 483 443 260 454 324 292 472 7 360 111 51 69 125 450 96 348 155 185 219 449 147 346 312 292 205 319 490 152 257 77 464 162 127 307 364 462 166 346 203 112 418 223 299 88 418 135 303 17 57 388 326 211 497 139 353 116 173 241 39 335 266 41 418 23 199 359 412 109 207 166 181 197 237 84 412 171 485 468 421 297 241 267 305 147 263 161 359 68 4 308 161 451 311 93 0 289 363 416 14 112 461 333 489 19 116 380 50 449 104 477 93 148 179 147 164 48 482 301 68 334 94 240 217 391 385 229 134 207 294 356 48 168 446 346 113 245 215 48 238 335 67 372 6 245 324 77 445 264 336 66 430 22 198 202 225 390 222 302 479 445 318 449 449 178 481 482 321 109 15 381 137 407 467 109 215 240 394 200 484 312 416 369 263 29 161 277 203 202 388 287 412 104 363 462 94 45 65 74 359 361 316 342 237 92 224 237 246 308 0 64 392 23 296 178 111 240 245 321 249 217 397 403 381 257 110 239 196 433 481 236 92 39 87 17 33 33 229 299 380 408 484 75 100 292 26 430 369 355 134 266 493 135 112 199 427 311 170 143 200 245 207 221 33 244 248 481 229 320 271 104 380 363 139 40 100 0 352 240 496 213 170 464 100 436 190 39 186 394 358 221 82 140 325 63 405 266 155 431 388 342 104 29 360 259 119 485 348 167 7 338 338 206 85 244 211 162 469 364 369 367 223 178 77 447 390 317 375 113 217 379 416 223 390 259 161 62 394 127 184 198 104 314 446 334 313 7 384 156 430 134 498 367 293 72 271 179 334 467 115 308 15 119 211 17 489 0 467 380 62 198 405 489 483 51 53 68 68 350 469 111 209 401 165 36 430 230 208 408 238 49 55 157 299 127 222 405 31 259 136 58 408 471 289 177 34 74 155 72 114 123 93 446 219 498 87 355 221 335 63 65 367 271 97 419 238 173 218 57 164 300 218 261 33 461 362 468 257 325 497 175 14 296 65 166 77 205 93 26 240 112 207 432 390 427 430 15 360 431 173 203 100 133 162 123 15 353 92 260 308 112 318 408 408 131 4 50 219 94 364 190 66 182 317 137 202 224 229 200 401 26 271 226 481 167 62 353 226 259 162 223 256 229 184 385 482 325 309 433 148 224 342 309 250 6 443 167 436 115 310 241 109 200 254 57 88 44 237 183 39 199 82 23 458 224 215 8 373 302 287 112 461 310 405 203 321 384 115 360 259 249 330 45 50 335 29 114 350 14 496 179 0 213 48 244 342 296 219 125 207 103 287 321 305 32 171 445 34 264 261 417 213 47 123 461 241 15 367 397 346 254 297 468 191 245 169 335 147 256 211 267 123 364 193 405 423 259 390 11 33 208 226 175 367 87 190 297 227 246 203 62 458 64 112 226 51 211 320 178 307 211 372 169 313 119 97 336 197 224 178 282 469 72 104 97 14 407 471 481 259 148 92 107 162 130 464 167 175 416 169 53 40 433 7 218 453 408 433 405 14 282 7 59 20 56 162 202 326 308 475 250 338 48 333 135 419 300 148 17 303 197 56 309 47 428 190 131 170 237 217 469 0 9 111 210 289 144 45 432 8 471 240 198 193 263 114 147 334 289 489 193 223 205 403 74 40 384 397 400 313 464 248 317 100 215 126 135 450 36 198 184 104 308 47 257 121 14 70 222 165 177 53 321 257 307 320 367 88 85 8 219 308 219 312 193 40 173 405 259 186 148 367 384 419 384 33 467 217 155 19 450 346 259 208 17 489 469 178 74 11 394 56 449 340 287 449 179 184 263 362 263 186 69 335 84 130 77 8 239 345 56 294 430 430 202 94 143 485 260 321 408 311 157 282 190 362 472 387 143 223 175 449 39 369 287 30 152 324 344 407 423 218 130 207 205 388 383 430 259 391 224 330 495 135 200 68 113 217 277 39 418 400 340 433 109 112 359 248 84 229 257 119 403 211 123 320 82 394 191 63 206 181 177 395 320 472 424 445 72 147 390 200 451 167 362 97 196 228 305 468 157 263 263 482 208 418 218 119 254 472 427 472 64 182 335 410 82 62 250 316 65 348 387 70 68 115 321 403 239 300 219 130 314 468 193 277 226 186 222 20 17 228 209 48 243 23 457 498 336 217 57 50 113 373 436 479 72 198 134 362 116 483 31 483 29 497 468 66 460 184 454 270 358 33 443 32 364 65 125 147 477 55 289 310 493 73 282 126 311 427 226 70 289 123 369 293 381 260 443 289 493 58 443 75 449 450 51 293 451 372 431 127 446 241 289 157 32 340 102 296 495 137 123 114 423 301 336 222 477 493 74 342 127 450 352 345 107 127 307 317 307 40 221 33 178 256 313 64 340 170 400 193 302 321 307 33 185 436 22 361 345 352 248 186 412 394 229 222 387 300 199 266 310 148 438 147 266 190 267 462 372 324 493 259 270 326 70 266 230 207 144 301 0 211 117 450 373 23 178 391 235 36 369 226 293 47 259 464 131 264 325 215 407 196 469 384 57 137 381 73 462 208 96 261 388 168 14 64 40 471 315 301 184 11 293 493 340 497 196 250 300 226 302 190 171 207 319 430 221 360 472 333 395 209 184 102 58 292 401 294 152 56 69 356 9 107 457 410 410 226 162 147 438 156 155 189 49 453 191 392 467 446 123 315 346 498 443 342 330 206 250 39 336 152 226 239 199 70 468 499 40 175 380 94 157 44 125 483 381 427 483 152 324 14 289 301 72 256 211 352 66 260 209 6 483 421 445 125 277 114 481 443 338 155 449 418 184 324 36 175 200 317 438 485 127 431 302 267 312 134 361 431 301 367 230 133 421 348 225 273 403 72 418 460 309 490 340 237 287 479 64 314 493 352 360 325 407 169 310 485 438 261 457 252 47 230 369 273 460 472 157 85 238 375 344 369 184 320 209 56 308 367 47 313 246 248 346 222 468 217 301 416 372 77 356 483 56 277 239 333 111 407 471 52 29 472 121 443 489 213 130 297 464 100 438 257 317 127 51 430 165 100 15 311 156 228 344 137 325 496 254 259 257 203 222 229 156 126 407 421 49 137 397 157 134 446 144 0 190 131 307 196 30 266 447 336 493 85 162 67 362 85 186 261 477 418 325 264 419 64 380 116 305 22 40 256 69 62 469 212 219 171 4 112 39 218 241 250 333 41 412 161 11 82 338 59 167 193 181 144 324 297 325 300 416 206 72 58 70 22 388 226 22 352 225 333 388 161 335 277 217 181 296 325 362 193 52 369 417 112 52 338 215 254 250 330 264 257 135 254 394 467 303 256 235 300 317 390 330 263 47 203 168 311 63 235 136 72 472 326 59 490 140 299 198 167 361 239 228 170 224 85 4 483 73'.split(' ')
        solution = [int(x) for x in solution]
    elif len(facilities) == 1000:
        solution = '796 403 274 497 96 557 249 697 743 910 206 580 484 188 593 677 655 286 669 114 63 824 325 6 509 237 829 14 301 86 650 930 121 741 759 493 475 321 955 655 14 963 145 598 535 583 12 240 863 820 440 469 957 743 810 458 372 846 16 650 338 740 592 789 694 142 239 252 409 912 48 424 657 317 370 957 922 209 400 87 24 584 186 84 381 170 59 187 815 24 185 915 175 446 800 122 972 275 962 697 110 229 376 909 929 904 26 403 678 770 735 264 330 678 463 879 306 616 445 191 127 965 35 416 494 272 486 954 236 140 644 210 794 624 479 88 991 479 555 844 518 593 126 932 691 493 737 305 869 585 815 402 571 479 705 942 94 247 526 458 844 247 546 678 94 472 383 72 669 177 494 388 763 127 716 862 477 566 864 476 973 304 630 121 205 863 935 292 325 618 979 960 123 31 738 4 300 86 276 274 446 978 98 81 663 281 858 104 62 76 347 493 176 851 986 327 971 82 455 409 604 883 891 900 603 157 216 341 9 384 640 438 235 530 848 83 105 680 629 100 520 769 891 630 579 394 630 178 377 595 256 370 273 452 394 927 445 194 763 703 441 325 63 708 521 189 317 1 500 381 248 217 291 476 991 772 62 896 751 810 256 504 393 177 410 510 876 351 22 358 764 453 171 432 421 765 291 799 705 452 52 5 567 9 754 400 146 23 223 515 514 328 314 295 471 439 424 341 44 83 528 116 743 716 612 187 714 786 5 362 450 878 686 402 377 778 318 191 421 235 475 647 406 828 301 692 278 553 509 636 468 439 916 979 731 98 774 511 165 600 395 162 32 313 832 108 23 338 696 649 254 852 294 981 130 465 804 239 909 607 652 858 137 13 366 925 781 16 248 892 810 995 565 969 701 453 416 469 962 68 279 726 488 791 311 190 233 972 734 41 401 185 962 770 440 933 922 544 967 688 359 858 611 114 52 459 395 909 6 885 698 288 637 363 431 977 106 739 686 748 707 937 230 779 132 294 775 984 936 647 760 171 938 454 922 705 592 359 312 530 569 90 43 511 468 546 870 912 967 618 285 548 63 914 743 669 804 389 770 110 649 240 453 296 954 50 961 245 2 984 879 502 69 824 26 64 689 253 133 900 308 883 410 801 421 83 475 682 715 317 442 14 601 701 209 571 84 249 296 278 789 39 324 544 644 347 116 210 972 778 135 857 799 675 428 873 275 209 684 362 225 677 663 734 589 819 263 126 272 532 613 354 785 380 830 749 420 149 417 249 273 91 636 514 451 401 123 697 227 826 556 705 948 827 154 885 510 886 304 785 646 720 557 233 768 362 982 79 317 438 237 6 866 411 8 396 802 252 170 374 31 114 458 508 777 400 256 852 567 348 129 162 236 826 58 684 703 950 417 80 442 282 274 787 391 637 19 963 658 259 893 267 430 467 264 801 877 737 213 805 565 39 95 621 640 271 230 967 293 530 684 110 175 126 421 639 273 704 449 775 829 309 507 940 778 631 421 192 915 225 843 182 369 223 157 281 360 621 24 837 189 49 412 12 523 133 458 830 316 884 189 250 365 661 765 741 963 287 549 51 731 643 455 641 405 168 48 708 682 123 243 151 148 61 51 260 313 820 267 816 549 12 699 636 608 739 927 512 814 475 142 383 981 846 644 393 399 333 185 112 276 292 719 193 1 26 88 384 366 417 459 84 490 340 965 830 672 942 97 109 216 592 298 926 505 60 866 664 537 940 581 380 636 375 827 277 405 2 424 857 667 202 149 176 130 469 488 211 212 937 526 925 706 363 736 873 432 944 948 196 911 216 813 255 486 954 555 80 817 796 605 751 363 300 678 162 196 637 700 737 152 173 412 581 168 569 67 318 249 354 269 484 566 790 884 68 523 595 969 935 792 942 937 585 132 82 194 815 454 906 452 347 706 229 869 522 230 563 263 0 265 436 493 694 238 637 399 695 726 224 582 212 833 107 235 84 79 489 130 236 81 450 286 310 463 333 90 689 731 973 234 939 505 316 112 700 327 817 575 511 652 648 243 811 801 217 699 215 665 103 544 173 664 503 245 807 260 853 129 590 593 903 58 790 248 556 92 771 534 117 337 282 910 827 520 565 22 675 209 418 413 584 253 459 595 583 537 119 903 76 266 702 967 905 68 178 288 485 654 933 418 374 440 914 463 690 259 936 953 819 58 565 918 606 170 786 789 90 688 96 750 471 533 864 522 916 257 387 389 951 661 253 871 47 816 69 239 348 268 235 501 621 891 492 515 974 722 751 330 669 641 215 293 440 405 582 567 905 580 861 13 235 395 672 427 103 414 428 650 755 969 339 593 441 334 424 372 941 814 698 420 487 938 271 957 761 86 977 38 395 404 476 377 965 832 911 18 687 563 636 908 6 759 492 263 433 287 488 256 900 8 850 194 202 468 279 268 341 416 291 154 686 994 627 719 687 7 760 510 702 467 278 955 625 518 633 70 746 584 933 296 792 268 848 626 681 533 822 248 600 346 137 912 50 428 871 400 694 375 254 175 502 810 304 979 131 221 401 548 994 32 684 3 612 601 47 763 743 247 268 263 941 596 184 921 981 387 779 893 262 124 955 301 515 764 835 62 837 984 96 229 124 314 927 874 717 438 910 634 58 829 201 317 250 917 277 868 471 63 834 366 507 352 146 857 350 521 924 997 66 153 48 794 512 272 553 629 477 843 814 940 122 287 82 557 110 340 412 704 629 763 931 236 114 921 970 613 932 172 223 121 665 569 51 139 316 147 818 606 444 279 201 702 629 663 716 510 620 16 66 832 754 834 505 475 620 312 192 240 359 488 966 965 289 339 667 607 354 132 155 876 639 620 369 116 77 445 904 634 689 227 344 186 121 187 811 264 112 831 413 90 500 878 883 877 930 852 237 961 761 400 331 951 216 994 736 964 949 714 205 596 790 861 413 193 848 859 679 354 122 442 692 804 606 634 634 764 887 279 707 126 925 503 706 595 7 478 170 734 0 899 41 360 978 788 360 92 123 648 87 271 850 963 771 971 784 409 487 722 817 449 575 759 523 505 365 402 663 37 740 649 736 986 979 365 187 647 731 92 653 369 258 370 994 833 717 356 455 324 132 511 318 182 599 591 67 106 118 585 311 682 779 965 252 211 960 538 691 729 140 287 540 843 104 359 440 932 112 154 553 29 46 321 275 381 773 22 814 618 233 680 120 190 96 201 626 6 53 205 824 696 931 8 217 185 387 388 846 371 396 964 264 679 84 515 869 494 108 684 223 598 627 737 922 423 596 601 917 770 876 383 380 463 138 540 179 467 361 658 713 852 29 314 714 932 105 138 621 358 635 472 805 265 601 633 748 941 176 905 949 218 805 36 537 893 731 250 415 9 555'.split(' ')
        solution = [int(x) for x in solution]
    elif len(facilities) == 2000:
        solution = '0 404 96 968 577 823 377 1619 986 1827 1773 450 1233 535 449 516 107 1067 390 1510 708 79 1566 1383 1245 148 940 60 910 1703 462 1939 669 897 1511 685 1271 1311 399 738 703 717 1407 651 1521 1361 1247 316 511 474 1997 126 278 846 1111 1320 903 625 1029 1564 891 1607 1250 1833 840 1744 1750 799 1739 269 879 932 1681 1932 1078 296 851 253 1018 117 1134 1744 469 831 1965 408 620 1703 1083 1384 1807 1991 1579 45 1848 1029 1176 284 1279 436 102 1378 925 862 23 1201 701 1167 1280 1316 1509 322 1592 1258 407 69 1240 1280 688 1816 1698 1963 557 669 1232 1215 894 162 756 1873 44 1249 1485 637 1599 709 149 648 1298 565 86 15 340 524 812 1122 798 1982 163 1188 771 786 421 1273 1048 94 1458 44 998 1356 694 35 1264 1960 1284 1793 1477 56 1357 1515 445 1739 1101 1793 659 336 1906 1967 1386 1115 1222 1807 384 1922 1132 1485 1686 760 204 1656 255 412 1873 1573 722 1826 395 894 525 214 155 429 571 908 778 391 731 4 1497 774 207 1010 1093 673 867 954 1990 121 1340 586 1788 1414 507 255 284 90 1136 214 120 1314 81 640 1464 26 1771 1255 327 1788 1203 1986 1995 1188 1630 213 1181 1231 1793 295 84 1643 1194 489 902 508 1190 1668 855 562 1744 566 851 1021 882 1614 735 7 1175 327 973 676 475 1615 438 1279 545 199 429 1235 1723 1084 741 1282 1416 909 556 1162 632 1018 758 330 436 1188 322 1875 535 729 1609 296 527 1760 195 956 338 795 1771 1731 860 56 1231 966 1761 1439 1808 1951 1457 1449 1092 446 1115 366 1213 421 1070 1782 1935 302 1601 88 1423 1002 1506 676 527 393 1133 585 476 723 334 665 1056 1268 1212 1808 724 119 111 1465 1497 1984 1997 1383 653 267 1668 1230 120 208 1402 14 1633 1522 1812 1258 787 1492 1701 652 787 125 125 1257 796 212 475 351 1990 1518 557 1393 1155 850 1588 1491 1765 932 1935 1615 1175 1736 200 1532 96 534 1351 1808 134 1241 1698 1711 449 389 13 1580 670 337 180 708 1232 334 20 1994 1431 434 469 85 1230 1057 217 868 304 632 788 76 565 1691 388 426 504 361 1350 298 560 460 447 1638 1083 1964 414 1021 318 1528 1521 539 682 42 460 195 462 930 1628 1800 389 1154 334 335 196 1845 436 141 1254 720 776 724 1369 991 1311 302 578 1960 723 1390 1625 117 853 1076 36 1167 1486 1924 828 1955 956 512 774 331 1876 463 612 368 1236 1130 1616 435 1443 535 118 931 1754 652 496 133 1701 504 1332 1575 779 358 249 1070 600 1487 440 885 1685 1544 479 1918 325 1389 307 567 1148 1242 631 940 149 1573 795 1679 337 1878 891 1982 1471 1176 1788 760 1638 618 1021 1572 1458 1725 325 123 898 212 8 559 1357 550 1470 1545 1448 1093 927 199 832 1509 566 1839 925 1384 673 124 618 1485 1416 508 1149 412 455 1173 1220 1958 545 236 944 1468 835 1947 1048 467 1619 1464 1205 261 618 20 1050 1004 711 1793 940 1905 1284 1346 1409 1652 151 248 1898 335 1480 1982 1177 479 1202 1093 1109 1819 295 449 1101 914 1830 756 1506 409 923 348 1948 83 989 561 214 1921 1091 449 1261 118 1347 1434 524 685 1427 694 110 1431 412 1895 604 361 415 1635 1557 946 1589 1525 1517 1102 1012 1109 1817 1490 1089 253 1848 887 465 689 14 644 1093 337 228 720 401 1810 731 1409 351 1788 1012 498 1074 978 723 1306 1477 782 1010 43 102 448 1783 835 1263 919 1522 285 1046 120 1659 198 1114 1546 1822 1216 853 1088 1796 884 1939 866 377 164 1051 771 1464 231 648 45 1773 1142 1457 954 654 806 1524 467 265 1881 1699 1121 249 1100 1602 539 1372 795 1580 276 5 1709 197 174 1599 1991 1249 1573 1644 1579 349 1641 254 927 899 381 1365 1328 1739 507 772 485 678 1493 1675 1785 1365 1781 1673 350 1854 1592 1532 759 978 1607 152 428 669 1582 991 713 1495 1476 507 330 294 713 220 1579 1632 1177 1476 709 1247 15 1232 295 271 1211 1495 670 1011 242 1471 1173 767 468 477 1368 840 1462 1602 1819 782 159 1297 750 579 315 1070 1829 1464 1004 1026 1011 281 440 1918 364 227 46 1036 180 863 924 403 1208 307 1310 286 166 1918 446 1783 1314 862 1462 209 249 1927 1959 1837 395 1810 1191 1004 656 1286 12 979 857 860 1209 1656 992 1480 998 879 84 1125 435 1582 361 751 298 375 1609 1817 705 215 672 1515 177 1736 872 850 110 1490 448 1105 148 1702 1036 1027 976 628 1819 1394 635 922 1018 813 1492 798 148 79 149 1089 1625 1825 1797 512 772 353 1183 653 800 1091 314 963 1235 569 794 727 1764 198 1281 1624 234 209 1254 664 838 764 266 814 1873 83 1386 1624 1103 724 267 900 656 1328 795 237 426 119 1508 1685 1694 922 1771 1386 326 414 486 789 703 328 1991 1816 1162 899 49 705 1194 1673 1767 534 155 1783 802 1599 685 1668 600 308 1566 1250 1065 364 569 535 398 1644 1630 1873 246 1968 794 813 431 1934 1997 602 1759 1133 865 393 1222 1476 1634 336 760 838 1845 497 1893 504 303 1300 1049 1065 1187 254 347 1245 304 1518 1994 1111 738 1185 772 1718 404 1513 883 207 1676 673 795 486 1708 1198 963 1229 1021 1298 1757 12 708 1371 1696 285 899 823 570 296 1102 1372 750 1198 1933 196 1588 236 735 687 124 902 1174 1848 1201 1310 328 1685 658 1490 1915 537 469 1994 1183 765 367 838 190 226 1585 1397 1818 1882 1499 1448 1969 1796 1424 1231 1694 1559 1246 1509 843 1879 1486 1334 1000 885 627 1629 1643 109 1132 353 727 165 344 608 1390 72 1105 1481 549 897 503 1415 36 842 585 1687 1502 1442 1810 384 604 1706 477 382 397 313 525 1062 1313 1596 1277 507 1657 1984 248 1162 1459 855 643 501 433 760 1060 1513 980 445 868 393 1566 867 1709 762 1599 1585 654 1621 982 468 1845 73 569 1334 877 265 317 1676 1974 287 1582 1597 1453 402 556 748 885 510 1545 1471 570 1109 1926 1324 1857 1458 1070 1788 931 1007 408 485 408 1465 741 1525 1263 371 1763 961 288 827 79 412 1762 93 1651 1091 1313 571 1969 1115 814 73 989 721 447 1010 1893 338 1181 1105 1595 592 1601 1854 1698 1778 637 799 751 1413 848 1769 1427 423 1974 1911 620 1947 1366 1834 1820 1481 447 1374 1155 1952 846 186 872 1176 1491 1254 1879 1141 42 179 1510 1316 223 231 1568 1991 433 497 433 1606 197 1655 1304 1039 677 1419 436 1675 302 1131 415 1939 20 1515 821 688 1491 909 1767 1506 1517 1711 1825 1945 360 1881 1235 933 1633 1565 823 1678 444 1357 922 73 1973 199 879 1315 108 215 1499 297 1556 511 450 1696 1880 166 7 1939 1257 1273 1377 776 1760 481 495 843 1276 1449 1104 326 1264 111 1481 1726 1702 276 1577 1733 73 1269 1351 1483 586 1350 1492 533 1837 462 1924 1383 969 93 1042 889 1693 1032 903 1420 1466 1457 503 1973 663 1585 376 1497 468 1965 469 354 213 1588 1424 1120 493 862 828 1033 1818 11 990 1743 1967 687 1199 1932 980 602 1696 1909 376 503 1008 1365 1304 691 693 567 615 1356 1706 673 1054 925 324 250 129 1168 1337 1141 177 1486 1561 231 919 764 1076 537 486 1896 46 1294 1079 13 1780 628 209 1601 414 1101 228 1424 178 294 250 1030 876 1027 1905 45 579 1154 1306 1702 165 1420 1585 1360 1395 1222 214 172 1721 402 1187 700 937 1513 1203 500 1162 365 501 344 1980 1056 643 1488 1205 1125 923 1604 1761 1702 96 418 1817 296 178 1208 1647 1731 927 180 1641 1416 114 132 220 1739 703 1395 399 512 1881 877 126 1036 1774 814 72 1290 1428 495 424 1369 208 772 1181 887 889 1120 1917 738 1010 1882 930 1136 464 1898 298 1175 426 1723 582 94 549 1893 751 653 438 524 240 1671 1594 117 172 476 853 536 893 965 617 308 12 506 1375 885 17 1199 347 271 1659 272 551 297 1760 1817 265 1781 1718 1935 756 1769 1457 72 186 419 1764 15 93 345 734 539 662 786 1619 625 626 1142 1187 439 0 1507 1285 122 200 1709 1237 1216 793 124 1625 1838 1483 753 431 1949 1078 1830 1799 1284 649 217 1154 1312 1819 455 1420 1708 82 746 1271 1378 1100 619 11 1174 95 1662 1233 1952 1378 1202 1054 132 1528 691 804 863 579 643 818 968 631 877 391 1827 223 1076 1888 1125 562 562 1617 397 1799 1083 401 428 1285 1183 565 481 285 1698 349 567 1415 1703 409 980 1619 1998 1594 626 126 1597 313 40 24 1351 1351 296 257 1854 1100 1007 158 714 1158 1275 403 795 297 236 294 414 5 1754 307 366 196 407 1365 1134 729 1871 1965 961 1084 1614 1674 1158 1255 1664 1015 585 1681 831 158 1763 1255 625 1572 927 588 479 1719 1511 1575 846 1660 670 635 1198 978 774 931 1671 53 691 1978 1712 1133 1466 1074 1629 474 1629 1857 1620 1499 390 1042 421 782 1079 579 1552 1723 600 511 1084 1705 1546 298 602 1653 892 885 178 1281 1998 604 678 862 1215 663 1205 891 1790 1648 1414 1574 1111 1882 1651 831 1332 956 703 1212 1462 1655 1892 263 1673 1369 168 1876 1294 786 1297 1952 1610 654 615 1595 1668 78 358 318 1888 1548 1826 1015 669 752 1764 865 1727 947 205 508 348 14 381 796 181 1237 1659 871 502 1320 625 1136 841 1158 368 863 1963 627 500 1814 133 748 385 242 1839 1066 1439 1313 1591 338 1394 1657 948 588 711 1872 843 1948 991 197 721 635 898 1282 838 315 406 1177 475 1996 1880 609 684 890 1544 1816 217 893 322 1922 1754 1618 1891 534 1242 572 1839 1226 1328 644 1814 1718 1699 1628 158 1375 1768 954 1088 195 1214 1933 1574 450 1298 1732 1759 1335 1792 599 60 409 1666 767 1892 64 1518 29 889 1557 1785 1572 586 1792 1395 1147 278 1049 1894 17 1164 90 94 1674 1054 1240 937 1208 860 557 374 1316 398 746 1635 806 1217 842 1959 1594 1081 163 520 689 1947 700 653 1016 121 207 1572 51 1968 665 789 729 31 115 589 93 1356 1318 574 947 789 525 690 727 1624 947 748 780 406 1173 328 502 1006 1423 512 599 668 850 996 1963 1963 783 1693 423 84 315 498 1704'.split(' ')
        solution = [int(x) for x in solution]
    else:
        solution = initial_solution(customers, facilities)

    import random
    #customers_to_optimize = set(random.sample(range(len(customers)), min(customers_per_iter, len(customers))))

    best_obj = compute_obj(facilities, customers, solution)
    best_solution = solution[:]
    print(solution)
    for i in range(iterations):
        #print(solution)

        try:
            customers_to_optimize = random_facility(solution, customers, num_fac)
            solution = optimize(solution, customers, facilities, customers_to_optimize)
            obj = compute_obj(facilities, customers, solution)
            print(obj)
            if obj < best_obj:
                best_obj = obj
                best_solution = solution[:]
                print_output_data(obj, solution)
        except:
            pass
    return best_solution


def random_n_customers(solution, customers, customers_per_iter):
    return set(random.sample(range(len(customers)), min(customers_per_iter, len(customers))))

def random_facility(solution, customers, num_fac):
    facilities_open = list(set(solution))
    random_fac_is = set([facilities_open[i] for i in list(set(random.sample(range(len(facilities_open)), num_fac)))])
    return set([i for i, f in enumerate(solution) if f in random_fac_is])

def compute_obj(facilities, customers, solution):
    used = [0]*len(facilities)
    for facility_index in solution:
        used[facility_index] = 1

    # calculate the cost of the solution
    obj = sum([f.setup_cost*used[f.index] for f in facilities])
    for customer in customers:
        obj += length(customer.location, facilities[solution[customer.index]].location)
    return obj

def print_output_data(obj, solution):
    output_data = '%.2f' % obj + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, solution))
    print(output_data)

if __name__ == '__main__':
    run2()

